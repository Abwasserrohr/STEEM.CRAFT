#
# ==============
# CustomSteemRequest.sk
# ==============
# CustomSteemRequest.sk is part of the STEEM.CRAFT core functions.
# ==============

import:
  java.net.URL
  java.io.InputStreamReader
  java.io.BufferedReader
  com.fasterxml.jackson.databind.ObjectMapper

#
# > Function - CustomSteemRequest
# > Actions:
# > Requests the data from a Steem API node in a thread.
function CustomSteemRequest(request:text,requestid:text):
  set metadata value "SC|CustomSteemResult|%{_requestid}%" of getDummy() to "wait"
  set {SC::CustomSteemRequest} to {_request}
  set {SC::CustomSteemRequestID} to {_requestid}
  $ thread
  set {_result} to AsyncCustomSteemRequest({SC::CustomSteemRequest},{SC::CustomSteemRequestID})

#
# > Function - CustomSteemRequest
# > Actions:
# > Sets the result of the request into a temporary global metadata variable.
function AsyncCustomSteemRequest(request:text,requestid:text,threaded:boolean=true) :: object:
  delete {SC::CustomSteemRequest}
  delete {SC::CustomSteemRequestID}

  set {_url} to new URL("https://api.steemit.com")
  set {_urlConnection} to {_url}.openConnection()

  #
  # > We want the current state, do not cache.
  {_urlConnection}.setUseCaches(false)

  #
  # > We have custom input and also output, since we want to know
  # > if the streamer is streaming or not.
  #{_urlConnection}.setDoInput(true)
  {_urlConnection}.setDoOutput(true)

  
  #
  # > We're looking to POST data.
  {_urlConnection}.setRequestMethod("POST")

  set {_datarequest} to {_request}.getBytes("UTF-8")

  {_urlConnection}.setRequestProperty("Content-Type", "application/json")
  {_urlConnection}.setRequestProperty("charset", "utf-8")

  {_urlConnection}.getOutputStream().write({_request}.getBytes())


  {_urlConnection}.connect()

  #
  # > Stream the response to access it.
  set {_inputStreamReader} to new InputStreamReader({_urlConnection}.getContent())
  set {_bufferedReader} to new BufferedReader({_inputStreamReader})
  set {_response} to {_bufferedReader}.readLine()
  {_inputStreamReader}.close()

  {_urlConnection}.disconnect()

  #
  # > Delete temporary variables which are no longer needed.
  delete {_bufferedReader}
  delete {_inputStreamReader}
  delete {_urlConnection}
  delete {_url}

  #
  # > Read the json response using ObjectMapper and save it to metadata for 5 seconds.
  set {_mapper} to new ObjectMapper()
  set {_jsonNode} to {_mapper}.readTree({_response})
  if {_threaded} is true:
    set metadata value "SC|CustomSteemResult|%{_requestid}%" of getDummy() to {_jsonNode}

    delete {_response}

    wait 5 seconds
    delete metadata value "SC|CustomSteemResult|%{_requestid}%" of getDummy()

  else:
    return {_response}


#
# > Function - CustomSteemRequestResult
# > Returns the result of a CustomSteemRequest.
# > Paremeters:
# > <text> The request ID that has been used to request the data.
function CustomSteemRequestResult(requestid:text) :: object:
  return metadata value "SC|CustomSteemResult|%{_requestid}%" of getDummy()
