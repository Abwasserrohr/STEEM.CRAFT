#
# ==============
# getRawOpsInBlock.sk
# ==============
# getRawOpsInBlock.sk is part of the STEEM.CRAFT core functions.
# ==============

import:
  com.fasterxml.jackson.databind.ObjectMapper
  java.util.ArrayList
  java.io.FileWriter
  java.io.BufferedWriter
  java.nio.file.Paths
  java.nio.file.Files
  java.lang.String
  java.util.UUID

#
# > Function - getRawOpsInBlock
# > Returns a request id that can be used to retrieve the operations using CustomSteemRequestResult(id)
# > Parameters:
# > <number>block number
# > <boolean>only virtual operations? false=not only virtual ones
function getRawOpsInBlock(blocknumber:number,onlyvirtual:boolean=false,threaded:boolean=true) :: object:
  set {_mapper} to new ObjectMapper()

  set {_request} to HashMap()
  set {_params} to new ArrayList() 

  {_params}.add({_blocknumber})
  {_params}.add({_onlyvirtual})

  {_request}.put("jsonrpc", "2.0")
  {_request}.put("method", "condenser_api.get_ops_in_block")
  {_request}.put("params", {_params})
  {_request}.put("id", 1)
  set {_requestID} to UUID.randomUUID().toString()
  if {_threaded} is true:
    if getDebug() is true:
      message "STEEM.CRAFT Using threaded process for %{_blocknumber}%. Do not use caching for now." to console
    CustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID})
    return {_requestID}
  else:
    if getBlockCached() is true:
      set {_file} to Paths.get("plugins/Skript/storage/steemblocks/%{_blocknumber}%-%{_onlyvirtual}%.json")
      if Files.exists({_file}) is true:
        set {_data} to try Files.readAllBytes({_file})
        set {_value} to try new String({_data})
        if {_value} is not "":
          set {_response} to {_mapper}.readTree({_value})
          return {_response}.get("result")
      if getDebug() is true:
        message "STEEM.CRAFT %{_blocknumber}% is not available. Load and store it." to console
      set {_response} to AsyncCustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID},false)
      set {_jsonNode} to {_mapper}.readTree({_response})
      if {_jsonNode}.get("result").size() is not 0:
        delete {_file}
        set {_file} to try new FileWriter("plugins/Skript/storage/steemblocks/%{_blocknumber}%-%{_onlyvirtual}%.json")
        set {_bufferedWriter} to try new BufferedWriter({_file})
        if {_file} is set:
          try {_bufferedWriter}.write({_jsonNode}.toString())
          try {_bufferedWriter}.close()
      return {_jsonNode}.get("result")
    else:
      if getDebug() is true:
        message "STEEM.CRAFT Do not use cached blocks, loading %{_blocknumber}%." to console
      set {_response} to AsyncCustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID},false)
      set {_jsonNode} to {_mapper}.readTree({_response})
      return {_jsonNode}.get("result")
