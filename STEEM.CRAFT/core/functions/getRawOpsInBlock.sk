#
# ==============
# getRawOpsInBlock.sk
# ==============
# getRawOpsInBlock.sk is part of the STEEM.CRAFT core functions.
# ==============

import:
  com.fasterxml.jackson.databind.ObjectMapper
  java.util.ArrayList

#
# > Function - getRawOpsInBlock
# > Returns a request id that can be used to retrieve the operations using CustomSteemRequestResult(id)
# > Parameters:
# > <number>block number
# > <boolean>only virtual operations? false=not only virtual ones
function getRawOpsInBlock(blocknumber:number,onlyvirtual:boolean=false,threaded:boolean=true) :: object:
  set {_mapper} to new ObjectMapper()

  set {_request} to HashMap()
  set {_params} to new ArrayList() 

  {_params}.add({_blocknumber})
  {_params}.add({_onlyvirtual})

  {_request}.put("jsonrpc", "2.0")
  {_request}.put("method", "condenser_api.get_ops_in_block")
  {_request}.put("params", {_params})
  {_request}.put("id", 1)

  set {_requestID} to getRandomUUID()
  if {_threaded} is true:
    CustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID})
    return {_requestID}

  else:
    if getBlockCached() is true:
      set {_value} to getGeneralStorageData("steemblocks","%{_blocknumber}%-%{_onlyvirtual}%","ops")
      if {_value} is set:
        set {_response} to {_mapper}.readTree(decompressBase64({_value}))
        return {_response}.get("result")
      set {_response} to AsyncCustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID},false)
      set {_jsonNode} to {_mapper}.readTree({_response})
      if {_jsonNode}.get("result").size() is not 0:
        saveGeneralStorageData("steemblocks","%{_blocknumber}%-%{_onlyvirtual}%","ops",compressBase64({_response}))
      return {_jsonNode}.get("result")
    else:
      set {_response} to AsyncCustomSteemRequest({_mapper}.writeValueAsString({_request}),{_requestID},false)
      set {_jsonNode} to {_mapper}.readTree({_response})
      return {_jsonNode}.get("result")
