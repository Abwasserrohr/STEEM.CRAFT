#
# ==============
# getOpsInBlock.sk
# ==============
# getOpsInBlock.sk is part of the STEEM.CRAFT core functions.
# ==============

import:
  eu.bittrade.libs.steemj.SteemJ

#
# > Function - getOpsInBlock
# > Returns all operations within the given block.
# > Parameters:
# > <number>block number
# > <boolean>only virtual operations? false=not only virtual ones
function getOpsInBlock(blocknumber:number,onlyvirtual:boolean=false) :: object:
  #
  # > If block caching is disabled, just return.
  if getBlockCached() is false:
    set {_steemj} to new SteemJ()
    return {_steemj}.getOpsInBlock({_blocknumber},{_onlyvirtual})
  #
  # > If the block caching is not disabled.
  else:
    set {_tmp} to getGeneralStorageData("steemblocks","%{_blocknumber}%-%{_onlyvirtual}%","b") 
    #
    # > If the block is cached, decompress the base64 string and deserialize it
    # > to make it a SteemJ object again.
    if {_tmp} is set:
      return deserialize(decompressBase64({_tmp}))
    #
    # > If the block operations are not cached, get the operations, serialize and compress them,
    # > then return to save traffic.
    else:
      set {_steemj} to new SteemJ()
      set {_block} to {_steemj}.getOpsInBlock({_blocknumber},{_onlyvirtual})
      saveGeneralStorageData("steemblocks","%{_blocknumber}%-%{_onlyvirtual}%","b",compressBase64(serialize({_block})))
      return {_block}
